import numpy as np
from collections import OrderedDict

RANDOM_SEED = 10

USE_CHEAP_LOCA_MODEL = False
CHEAP_LOCA_NORMALISE_FOCUS_SHIFT = False
CHEAP_LOCA_CUTOFF = 0.1  # > 0.04 or so is not recommended

POLYCHROMATIC_NUM_WAVELENGTHS = 9
MODEL_WVLS = np.linspace(0.42, 0.67, POLYCHROMATIC_NUM_WAVELENGTHS + 2)[1:-1]
# MODEL_WVLS = np.array([0.45, 0.62])

SPACIAL_FREQS = np.arange(4, 32, 2) / 64

NUM_ZERNIKES = 48

SAVE_RESULTS = True

ENFORCE_BOUNDS_IN_COST = False

COST_WEIGHT_LINE_DIFF = 0e-1
COST_WEIGHT_MEAN_SQUARES = 1000
COST_WEIGHT_PEAK_LOCATIONS = 0.000
COST_WEIGHT_PEAKINESS = 0.000

COST_WEIGHT_XMODS = 1.0

PRYSM_Q_FALLBACK = 2
DEFAULT_SAMPLES = 256
USE_CUDA = True
PRECISION = 64 if USE_CUDA else 64
CUDA_PROCESSES = 2
CUDA_CPU_PROCESSES = 2
CPU_ONLY_PROCESSES = 1
CPU_GPU_ARRAYSIZE_BOUNDARY = 160
CPU_GPU_FFTSIZE_BOUNDARY_FINETUNE = True
FINETUNE_MIN = 128
FINETUNE_MAX = 384
MASK_CACHE_SIZE = 160

ENABLE_PUPIL_DISTORTION = True

PSF_SPLINE_ORDER = 3

Q_AUTOSIZE_SCALAR = 1
PHASE_AUTOSIZE_SCALAR = 0.6

DF_STEP_TOLERANCE = 1.6

MAXITER = 300

DISABLE_MULTIPROCESSING = False

LIVE_PLOTTING = not DISABLE_MULTIPROCESSING
# LIVE_PLOTTING = False

BASE_WAVELENGTH = 0.575

EXTREME_FOCUS_WEIGHT = 0.9
HIGH_FREQUENCY_WEIGHT = 0.9

PLOT_ALPHAS = np.array([1,0,0,1,0,0,1,0,0,0,1,0,0])
PLOT_LINES = np.array([0,1,2,3,5,6,7,8,9,10,11,12,13])[PLOT_ALPHAS > 0.5]
PLOT_ALPHAS = PLOT_ALPHAS[PLOT_ALPHAS > 0.5]

DIVIDE_BY_APERTURE = lambda f, b=None: 1.0 / f
MULTIPLY_BY_APERTURE = lambda f, b=None: f
DIVIDE_BY_BASE_APERTURE = lambda f, b=None: 1.0 / b
MULTIPLY_BY_BASE_APERTURE = lambda f, b=None: b
NOP = lambda f, b=None: 1.0

ZERNIKE_SCHEME = "FRINGE"

COST_MULTIPLIER = 1

ZLIMIT = 7
ZINIT = 0

DEFAULT_SCALE = 2e-3

HIDDEN_COST_SCALE = 2e-3

OPT_PER_FOCUSSET = True
OPT_SHARED = False
OPT_PER_FIELD = "PER_FIELD"
LOCK = "LOCK"
PARAMS_OPTIONS = OrderedDict(
    # param_name=(Min, Initial, Max, normalise_with_aperture, per_focusset)
    df_offset=(None, None, None, NOP, OPT_PER_FOCUSSET, DEFAULT_SCALE),
    df_step=(0.07, 0.2, 0.7, lambda f, b: 1.0 / f, OPT_PER_FOCUSSET, DEFAULT_SCALE),
    df_each=(-0.05, 0.0, 0.05, NOP, OPT_PER_FIELD, DEFAULT_SCALE),
    z2=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, LOCK, DEFAULT_SCALE),
    z3=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, LOCK, DEFAULT_SCALE),
    z5=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z6=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z7=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z8=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z9=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z10=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z11=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z12=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z13=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z14=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z15=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z16=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z17=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z18=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z19=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z20=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z21=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z22=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z23=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z24=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z25=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z26=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z27=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z28=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z29=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z30=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z31=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z32=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z33=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z34=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z35=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z36=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z37=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z38=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z39=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z40=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z41=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z42=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z43=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z44=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z45=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z46=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z47=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    z48=(-ZLIMIT, ZINIT, ZLIMIT, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    fstop=(1 / 1.23, 1.00, 1.2, MULTIPLY_BY_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    loca=(-10, 0.0, 10, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    loca1=(-10, 0.0, 10, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    spca=(-20, 0.00, 20, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    spca2=(-20, 0.00, 20, DIVIDE_BY_BASE_APERTURE, OPT_SHARED, DEFAULT_SCALE),
    zero=(0, 0.0, 0.05, NOP, OPT_SHARED, DEFAULT_SCALE),
    a=(0.7, 1.0, 1.3, NOP, OPT_SHARED, DEFAULT_SCALE),
    b=(0.7, 1.0, 1.3, NOP, OPT_SHARED, DEFAULT_SCALE),
    v_slr=(0.2, 1.0, 1.5, NOP, OPT_SHARED, DEFAULT_SCALE),
    v_rad=(1.0, 1.0, 1.5, NOP, OPT_SHARED, DEFAULT_SCALE),
    v_x=(-1.2, 0.0, 1.2, NOP, LOCK, DEFAULT_SCALE),
    v_y=(-1.2, 0.0, 1.2, NOP, LOCK, DEFAULT_SCALE),
    tca_slr=(-1.0, 0.0, 1.0, NOP, OPT_SHARED, DEFAULT_SCALE),
    lca_x=(-1.0, 0.0, 1.0, NOP, LOCK, DEFAULT_SCALE),
    lca_y=(-1.0, 0.0, 1.0, NOP, LOCK, DEFAULT_SCALE),
    ellip=(-0.5, 0, 0.5, NOP, OPT_SHARED, DEFAULT_SCALE),

)

OPTIMISE_PARAMS = [
    'df_offset',
    'df_step',
    # 'df_each',
    # 'z2',
    # 'z3',
    'z5',
    'z6',
    'z7',
    'z8',
    'z9',
    'z10',
    'z11',
    'z12',
    'z13',
    'z14',
    'z15',
    'z16',
    'z17',
    'z18',
    'z19',
    'z20',
    'z21',
    'z22',
    'z23',
    'z24',
    'z25',
    'z26',
    'z27',
    'z28',
    'z29',
    'z30',
    'z31',
    'z32',
    'z33',
    'z34',
    'z35',
    'z36',
    'z37',
    'z38',
    'z39',
    'z40',
    'z41',
    'z42',
    'z43',
    'z44',
    'z45',
    'z46',
    'z47',
    'z48',
    'fstop',
    'loca1',
    'loca',
    'spca',
    'spca2',
    'v_slr',
    # 'v_rad',
    # 'v_x',
    # 'v_y',
    # 'lca_x',
    'tca_slr',
    'ellip',
    # 'a',
    # 'b',
    # 'zero',
]

# SCALE_EXTRA = np.abs(np.array([-2.30925090e-01,  2.05257769e-02,  2.11758741e-02,  2.21353192e-02,  2.28184778e-02,  2.10207242e-02,  8.22345531e+00,  8.80515373e+00,  9.90476505e+00,  8.14793071e+00,  8.40290885e+00, -1.76682208e-03, -1.43556309e-04,  1.10035290e-05, -1.74558343e-04, -4.09031045e-01,  2.41418327e-04,  4.67017792e-04, -9.13075117e-03,  6.87275416e-04, -5.40116043e-04, -1.81060123e-04,  3.26163625e-01, -3.29766256e-02, -7.01375558e-05,  3.16370694e-04,  1.73483070e-04, -1.84656862e-02,  9.94249735e-04,  1.03581598e-03,  1.14507296e-03, -1.81777548e-01,  1.24899450e-04, -4.94759960e-05,  3.90962976e-02,  1.50866599e-04,  1.35693251e-03,  1.35693251e-03, -8.09822895e-02,  3.89969572e-03,  2.63238828e-03,  2.53635768e-03, -8.06476643e-03]))
# SCALE_EXTRA = np.clip(SCALE_EXTRA, 1e-3, 1)
SCALE_EXTRA = np.ones((len(OPTIMISE_PARAMS) * 4,)) * 1
SCALE_EXTRA = {'fstop': 13.607281599999999, 'df_offset': 0.0764492433, 'df_step': 1.16881759, 'z5': 0.0983174243, 'z6': 0.00023299805100000003, 'z7': 0.493216159, 'z8': 0.242837039, 'z9': 0.8065672769999999, 'z10': 0.195430222, 'z11': 0.0662891194, 'z12': 0.0486538038, 'z13': 0.000661537089, 'z14': 0.40302563300000005, 'z15': 0.32770787, 'z16': 0.40232316400000007, 'z17': 0.0463855289, 'z18': 0.0004545338140000001, 'z19': 0.171025883, 'z20': 0.14938717, 'z21': 0.0452590505, 'z22': 0.00151844004, 'z23': 0.058906337200000006, 'z24': 0.108724961, 'z25': 0.397145341, 'z26': 0.0115179117, 'z27': 0.0225768424, 'z28': 0.0907004911, 'z29': 0.000625102395, 'z30': 0.0715260058, 'z31': 0.0715260058, 'z32': 0.0301056248, 'z33': 0.00719909981, 'z34': 0.12136284499999998, 'z35': 0.0803395493, 'z36': 0.562270768, 'z37': 0.00435906331, 'z38': 6.46375807e-05, 'z39': 0.0633907675, 'z40': 0.0555825523, 'z41': 0.025629971600000002, 'z42': 3.45226735e-05, 'z43': 0.0926226302, 'z44': 0.0386147789, 'z45': 0.178741781, 'z46': 0.000399309336, 'z47': 0.067941308, 'z48': 0.1628365, 'loca1': 0.0471954079, 'loca': 0.0663889213, 'spca': 0.0399380827, 'spca2': 0.261142324, 'v_slr': 0.22067671400000002, 'tca_slr': 0.0899599785, 'ellip': 11.0982883}

# SCALE_EXTRA = np.arange(1, 70)
# SCALE_EXTRA = np.random.random(len(SCALE_EXTRA)) + 0.5
# SCALE_EXTRA[15:] = 1.0

USE_EXISTING_PARAMETER_IF_FIXED = False

if 'loca' in OPTIMISE_PARAMS and len(MODEL_WVLS) < 3:
    print("Cannot model LOCA properly without more wavelengths!")

for param in OPTIMISE_PARAMS:
    if PARAMS_OPTIONS[param][4] == LOCK:
        raise Exception("Locked parameters cannot be optimised")

FIXED_PARAMS = []
for key in PARAMS_OPTIONS.keys():
    if key not in OPTIMISE_PARAMS:
        FIXED_PARAMS.append(key)
